;; -*-lisp-*-
;; .stumpwmrc 
;; Author: David B
;; License: GPL
;; Modeled off of gwern's stumpwmrc file at: http:en.wikipedia.org/wiki/User:Gwern/.stumpwmrc

(in-package :stumpwm)
(setq *startup-message* nil)

;;This is the flexoki theme 
;; solarized
(set '*colors* '("#100F0F"; "black"
		 "#AF3029"; "red"
		 "#66800B"; "green"
		 "#AD8301"; "yellow"
		 "#205EA6"; "blue"
		 "#A02F6F"; "magenta"
		 "#24837B"; "cyan"
		 "#FFFCF0")); "white"
 
;; (set '*colors* '("#073642"; "black"
;;		 "#dc322f"; "red"
;;		 "#859900"; "green"
;;		 "#b58900"; "yellow"
;;		 "#268bd2"; "blue"
;;		 "#d33682"; "magenta"
;;		 "#2aa198"; "cyan"
;;		 "#eee8d5")); "white"
;gruvbox
;; (set '*colors* '("#282828" ; black
;; 		 "#fb4934" ; red
;; 		 "#b8bb26"
;; 		 "#fabd2f"
;; 		 "#83a598"
;; 		 "#d3869b"
;; 		 "#8ec07c"
;; 		 "#ebdbb2"))

(setf *mode-line-foreground-color* (nth 7 *colors*))
(setf *mode-line-background-color* (nth 0 *colors*))
(setf *mode-line-border-color*     (nth 7 *colors*))

(set-fg-color (nth 7 *colors*))
(set-bg-color (nth 0 *colors*))
(set-border-color (nth 7 *colors*))

(update-color-map (current-screen))

(load-module "end-session")
;(load-module "ft2-fonts")
;(set-font (make-instance 'clx-ft2:font :family "Fira Mono" :size 12))

(load-module "stump-volume-control")
(define-key *top-map* (kbd "XF86AudioRaiseVolume") "volume-up")
(define-key *top-map* (kbd "XF86AudioLowerVolume") "volume-down")
(define-key *top-map* (kbd "XF86AudioMute") "volume-toggle-mute")
(define-key *top-map* (kbd "C-(")  "volume-down")
(define-key *top-map* (kbd "C-)")  "volume-up")
(define-key *top-map* (kbd "C-*")  "volume-toggle-mute")

(define-key *root-map* (kbd "C-l") "move-window right")
(define-key *root-map* (kbd "C-h") "move-window left")
(define-key *root-map* (kbd "C-j") "move-window up")
(define-key *root-map* (kbd "C-k") "move-window down")
(define-key *root-map* (kbd "l") "move-focus right")
(define-key *root-map* (kbd "h") "move-focus left")
(define-key *root-map* (kbd "j") "move-focus up")
(define-key *root-map* (kbd "K") "move-focus up")

(load-module "stump-backlight")
(setq stump-backlight::*use-clx-randr* nil)

(mapc (lambda (head)
	(toggle-mode-line (current-screen) head)) 
      (screen-heads (current-screen)))
(load-module "stumptray")
(stumptray:stumptray)

(setf *screen-mode-line-format* ;
      (list "[^B%n^b] %u %W | "
	    '(:eval (remove #\Newline (run-shell-command "date +'%a %I:%M%P'" t)))))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;; Global variable  ;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Default programs for various functions

(defun cat (&rest strings) "Concatenates strings, like the Unix command 'cat'. A shortcut for (concatenate 'string foo bar)."
  (apply 'concatenate 'string strings))

(defparameter *wallpaper* "$(ls wallpaper/* | shuf | head -n 1)")

(defparameter X-TERM "exec xterm -fa \"Berkeley Mono\" "
"X-TERM command definition so we can launch a terminal emulator")
;"exec emacsclient -c -e '(shell-switcher-new-shell)'" 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;; Functions aliases and macros ;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; --- process management ----------------------------------------
(defun ps-exists (ps)
  (let ((f "ps -ef | grep ~S | grep -v -e grep -e stumpish | wc -l"))
    (< 0 (parse-integer (run-shell-command (format nil f ps) t)))))

(defun start-uniq-command-ps (command &key op (bg t))
  (unless (ps-exists command)
    (run-shell-command
     (concat command " " (or op "") " " (if bg "&" "")))))

(defun kill-ps-command (command)
  (format nil "kill -TERM `ps -ef | grep ~S | grep -v grep | awk '{print $2}'`"
          command))
(defun kill-ps (command)
  (run-shell-command (kill-ps-command command)))

(defun shell-command (command) "Run a shell command and display output to screen.
   This must be used in a functional side-effects-free style! If a program does not
   exit of its own accord, Stumpwm might hang!"
          (check-type command string)
          (echo-string (current-screen) (run-shell-command command t)))
   
(define-stumpwm-command "shell-command" ((command :string "sh: " :string))
     (check-type command string)
     (shell-command command))

(defun set-wallpaper (wallpaper)
  (run-shell-command (concatenate 'string "feh --bg-scale " wallpaper)))


(defun replace-all (string part replacement &key (test #'char=))
"Returns a new string in which all the occurences of the PART is replaced with REPLACEMENT."
(with-output-to-string (out)
  (loop with part-length = (length part)
       for old-pos = 0 then (+ pos part-length)
       for pos = (search part string 
			 :start2 old-pos
			 :test test)
       do (write-string string out 
			:start old-pos
			:end (or pos (length string)))
       when pos do (write-string replacement out)
       while pos)))


(define-key *root-map* (kbd "Print")
  "exec import -window root png:$HOME/screenshot_$(date +%F_%H-%M-%S).png")

(defun update-window-title (window) 
  "If the window comes up with no title, set the user title to the
window's instance name so it doesn't appear with no context on the
mode-line"
  (when (equal "" (window-title window))
    (setf (window-user-title window) (window-res window))))
; (add-hook *new-window-hook* #'update-window-title)
;;;;;;;;;;;;;;;;;;;;;
;; Start Up groups ;;
;;;;;;;;;;;;;;;;;;;;;
(run-commands "gnewbg email"
	      "gnewbg music"
	      "gnewbg chat")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;; Keybindings and re-definitions;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; change the prefix key
(set-prefix-key (kbd "C-q"))

;; Lock the screen
(define-key *top-map* (kbd "C-M-Escape") "exec xscreensaver-command -lock")
(define-key *top-map* (kbd "s-l") "exec xscreensaver-command -lock")

(define-key *root-map* (kbd "c") X-TERM)
(define-key *root-map* (kbd "C-c") X-TERM) 
;; Set up emacs client
(define-key *root-map* (kbd "e") "exec emacsclient -c")

;; Browsing
(define-key *root-map* (kbd "C-f") "exec firefox")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;; Startup programs ;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Start pulseaudio so that we have sound!
(run-shell-command "pulseaudio --start &> /dev/null &")

(run-shell-command "xcompmgr &> /dev/null&")

;; Set the background image 
(set-wallpaper *wallpaper*)

(run-shell-command "emacs --daemon")
(run-shell-command "xscreensaver --no-splash")
; One finger tap sends button 1 AKA left click
(run-shell-command "synclient tapbutton1=1")
; Two finger tap sends button 3 AKA right click
(run-shell-command "synclient tapbutton2=3")
; Three finger tap sends button 2 AKA middle click
(run-shell-command "synclient tapbutton3=2")

;(setq *debug-level* 100)
;(redirect-all-output (data-dir-file "debug-output"))
;(require 'swank)
;(swank:create-server)
